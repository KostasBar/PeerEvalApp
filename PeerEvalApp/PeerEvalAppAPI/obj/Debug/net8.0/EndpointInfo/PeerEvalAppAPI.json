{
  "openapi": "3.0.1",
  "info": {
    "title": "PeerEvalAppAPI",
    "version": "v1"
  },
  "paths": {
    "/api/Evaluation/submit": {
      "post": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Submits a new evaluation based on the provided input data.",
        "requestBody": {
          "description": "The DTO containing the details for the evaluation submission.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitEvaluationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitEvaluationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitEvaluationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully submitted the evaluation."
          },
          "400": {
            "description": "The submission failed due to bad request (e.g. validation errors)."
          },
          "404": {
            "description": "The requested resource was not found (e.g. related entity missing)."
          },
          "500": {
            "description": "An unexpected error occurred during the submission process."
          }
        }
      }
    },
    "/api/Evaluation/evaluations-by-group/{groupId}/{cycleId}": {
      "get": {
        "tags": [
          "Evaluation"
        ],
        "summary": "Retrieves evaluations by group and cycle IDs.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group to retrieve evaluations for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "cycleId",
            "in": "path",
            "description": "The ID of the cycle to retrieve evaluations for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the evaluations.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalByGroupDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalByGroupDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EvalByGroupDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occurred while fetching the evaluations."
          },
          "404": {
            "description": "The requested evaluations were not found."
          }
        }
      }
    },
    "/api/EvaluationCycle/newcycle": {
      "post": {
        "tags": [
          "EvaluationCycle"
        ],
        "summary": "Initiates a new evaluation cycle with the specified details.",
        "requestBody": {
          "description": "The evaluation cycle data transfer object containing all necessary information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCycleDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCycleDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateCycleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The evaluation cycle was successfully created."
          },
          "409": {
            "description": "An evaluation cycle with the same properties already exists."
          },
          "400": {
            "description": "There was an error during the creation of the evaluation cycle."
          }
        }
      }
    },
    "/api/EvaluationCycle/updatecycle": {
      "post": {
        "tags": [
          "EvaluationCycle"
        ],
        "summary": "Updates an existing evaluation cycle with new information.",
        "requestBody": {
          "description": "The update data for the evaluation cycle.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCycleDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCycleDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCycleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The evaluation cycle was successfully updated and returned."
          },
          "404": {
            "description": "The evaluation cycle to update was not found."
          },
          "400": {
            "description": "There was a problem with the input parameters or during the update process."
          }
        }
      }
    },
    "/api/EvaluationCycle/evaluationCycleExists": {
      "get": {
        "tags": [
          "EvaluationCycle"
        ],
        "summary": "Checks if there is an active evaluation cycle.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the evaluation cycle status."
          },
          "400": {
            "description": "An error occurred while trying to retrieve the evaluation cycle."
          }
        }
      }
    },
    "/api/EvaluationCycle/get-all-cycles": {
      "get": {
        "tags": [
          "EvaluationCycle"
        ],
        "summary": "Retrieves all available evaluation cycles.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of all evaluation cycles."
          },
          "400": {
            "description": "An error occurred while trying to retrieve the list of evaluation cycles."
          }
        }
      }
    },
    "/api/Group/GetAllGroups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Retrieves a list of all groups.",
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of groups.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupReturnDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupReturnDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupReturnDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "An error occurred while trying to retrieve the list of groups."
          },
          "404": {
            "description": "The requested groups could not be found."
          }
        }
      }
    },
    "/api/Group/AddGroup": {
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Adds a new group to the system.",
        "requestBody": {
          "description": "The name of the new group to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewGroupDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added the new group."
          },
          "404": {
            "description": "The group already exists in the system."
          },
          "500": {
            "description": "An error occurred while trying to add the new group."
          }
        }
      }
    },
    "/api/User/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Authenticates a user and returns a JWT token.",
        "requestBody": {
          "description": "The user's login credentials.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogInDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogInDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogInDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the JWT token on successful authentication."
          },
          "401": {
            "description": "If the credentials are invalid or authentication fails."
          }
        }
      }
    },
    "/api/User/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Registers a new user with the provided details.",
        "requestBody": {
          "description": "The user's sign up information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignUpDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignUpDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignUpDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If the user is successfully registered."
          },
          "409": {
            "description": "If a user with the same email or username already exists."
          },
          "400": {
            "description": "If there is an error in the registration process."
          }
        }
      }
    },
    "/api/User/evaluations-for-user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves evaluations associated with a specific user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user whose evaluations are to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of evaluations for the user.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PastEvaluationsOfUserDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PastEvaluationsOfUserDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PastEvaluationsOfUserDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If no user with the specified ID exists."
          },
          "500": {
            "description": "If an error occurs during the process of retrieving evaluations."
          }
        }
      }
    },
    "/api/User/user-to-evaluate/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves users that a specific user can evaluate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The evaluator to be",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of users to be evaluated from the specific user.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersToEvaluateDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersToEvaluateDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsersToEvaluateDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "If no user with the specified ID exists."
          },
          "500": {
            "description": "If an error occurs during the process of retrieving users."
          }
        }
      }
    },
    "/api/User/users-by-group/{groupId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves a list of users belonging to a specific group.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The ID of the group for which to retrieve the users.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the users in the specified group."
          },
          "500": {
            "description": "An error occurred while processing the request to retrieve the users."
          }
        }
      }
    },
    "/api/User/update-user/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates an existing user's details.\r\nReceives user data from the client and applies updates.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data transfer object containing updated user details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EvalByGroupDTO": {
        "type": "object",
        "properties": {
          "cycleId": {
            "type": "integer",
            "format": "int32"
          },
          "cycleTitle": {
            "type": "string",
            "nullable": true
          },
          "evaluateeFirstName": {
            "type": "string",
            "nullable": true
          },
          "evaluateeLastName": {
            "type": "string",
            "nullable": true
          },
          "average": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EvaluationAnswerDTO": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "format": "int32"
          },
          "answerValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupReturnDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InitiateCycleDTO": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 30,
            "minLength": 5,
            "type": "string"
          },
          "weeks": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NewGroupDTO": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PastEvaluationsOfUserDTO": {
        "type": "object",
        "properties": {
          "cycleId": {
            "type": "integer",
            "format": "int32"
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "cycleStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "cycleEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "avgEvaluationResult": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "SubmitEvaluationDTO": {
        "required": [
          "evaluateeUserId",
          "evaluationCycleId",
          "evaluatorUserId",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "evaluatorUserId": {
            "type": "integer",
            "format": "int32"
          },
          "evaluateeUserId": {
            "type": "integer",
            "format": "int32"
          },
          "evaluationCycleId": {
            "type": "integer",
            "format": "int32"
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EvaluationAnswerDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCycleDTO": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "endWeek": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserLogInDTO": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 50,
            "minLength": 5,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "pattern": "(?=.*?[A-Z])(?=.*?[a-z])(?=.*?\\d)(?=.*?\\W)^.{8,}$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserSignUpDTO": {
        "required": [
          "email",
          "firstName",
          "groupId",
          "lastName",
          "password"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "email": {
            "maxLength": 100,
            "minLength": 5,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "pattern": "(?=.*?[A-Z])(?=.*?[a-z])(?=.*?\\d)(?=.*?\\W)^.{8,}$",
            "type": "string"
          },
          "userRole": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserUpdateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstname": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "role": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsersToEvaluateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "firstname": {
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}